title 'Foo Config'

control 'root key' do
  describe file('/root/.gnupg/gpg_batch_config_bar') do
    it { should exist }
    its(:content) { should match(/%commit/) }
    its(:content) { should match(/bar/) }
  end

  describe command('gpg2 --homedir /root/.gnupg --list-keys') do
    its('exit_status') { should eq 0 }
    its('stdout') { should match(/Chef Generated Default \(bar\) \(generated by Chef\)/) }
  end
end

control 'User foo: Batch Config' do
  describe file('/home/foo/.gnupg/gpg_batch_config_foo') do
    it { should exist }
    its(:content) { should match(/%commit/) }
    its(:content) { should match(/Key-Type: 1/) }
    its(:content) { should match(/Key-Length: 2048/) }
    its(:content) { should match(/Chef Generated Default \(foo\)/) }
  end
end

control 'User foo: Key' do
  describe command('gpg2 --homedir /home/foo/.gnupg --list-keys') do
    its('exit_status') { should eq 0 }
    its(:stdout) { should match(/Chef Generated Default \(foo\)/) }
  end
end

control 'User foo: Export key to file' do
  describe file('/tmp/foo.key') do
    it { should exist }
    its('owner') { should eq 'foo' }
    its('group') { should eq 'foo' }
    its(:content) { should match(/BEGIN PGP PUBLIC KEY BLOCK/) }
  end
end

control 'User root: Import key from file' do
  desc 'The root users keychain should contain the imported keys'

  describe command('gpg2 --homedir /root/.gnupg --list-keys') do
    its('exit_status') { should eq 0 }
    its('stdout') { should match(/409B6B1796C275462A1703113804BB82D39DC0E3/) }
  end
end

control 'User barfoo: Import key from file non-root user' do
  desc 'The non-root users keychain should exist with correct permission and contain the imported keys'

  describe directory('/home/barfoo/.gnupg/') do
    it { should exist }
    its('owner') { should eq 'barfoo' }
    its('group') { should eq 'barfoo' }
  end

  # Test that the key imported from a local file can be read from the keyring
  describe command('gpg2 --homedir /home/barfoo/.gnupg --list-keys') do
    its('exit_status') { should eq 0 }
    its('stdout') { should match(/foo/) }
  end
end
